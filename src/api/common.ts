// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: common.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "./google/protobuf/any";

export const protobufPackage = "com.aipoweredbot.api";

/** 必须是 proto3，它有标准的 JSON 映射 */

/** 响应的状态码枚举 */
export enum ApiCode {
  /** SUCCESS - 成功 */
  SUCCESS = 0,
  /** USER_NOT_EXISTS - 用户不存在 */
  USER_NOT_EXISTS = 100,
  /** USER_OR_PASS_ERROR - 用户名或密码错误 */
  USER_OR_PASS_ERROR = 101,
  UNRECOGNIZED = -1,
}

export function apiCodeFromJSON(object: any): ApiCode {
  switch (object) {
    case 0:
    case "SUCCESS":
      return ApiCode.SUCCESS;
    case 100:
    case "USER_NOT_EXISTS":
      return ApiCode.USER_NOT_EXISTS;
    case 101:
    case "USER_OR_PASS_ERROR":
      return ApiCode.USER_OR_PASS_ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ApiCode.UNRECOGNIZED;
  }
}

export function apiCodeToJSON(object: ApiCode): string {
  switch (object) {
    case ApiCode.SUCCESS:
      return "SUCCESS";
    case ApiCode.USER_NOT_EXISTS:
      return "USER_NOT_EXISTS";
    case ApiCode.USER_OR_PASS_ERROR:
      return "USER_OR_PASS_ERROR";
    case ApiCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 通用的 API 响应结构 */
export interface ApiResponse {
  /** 业务响应状态码 */
  code: ApiCode;
  /** 状态描述信息 */
  message: string;
  /** 核心数据，可以是任何类型 */
  data: Any | undefined;
}

function createBaseApiResponse(): ApiResponse {
  return { code: 0, message: "", data: undefined };
}

export const ApiResponse: MessageFns<ApiResponse> = {
  encode(message: ApiResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.data !== undefined) {
      Any.encode(message.data, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ApiResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseApiResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = Any.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ApiResponse {
    return {
      code: isSet(object.code) ? apiCodeFromJSON(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isSet(object.data) ? Any.fromJSON(object.data) : undefined,
    };
  },

  toJSON(message: ApiResponse): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = apiCodeToJSON(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data !== undefined) {
      obj.data = Any.toJSON(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ApiResponse>, I>>(base?: I): ApiResponse {
    return ApiResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ApiResponse>, I>>(object: I): ApiResponse {
    const message = createBaseApiResponse();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.data = (object.data !== undefined && object.data !== null) ? Any.fromPartial(object.data) : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
